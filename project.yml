name: Nabla
options:
    xcodeVersion: 14.0
    groupOrdering:
        - order: [Modules, Nabla]
    localPackagesGroup: Modules
fileGroups: [README.md]
configs:
    Debug-Dev: debug
    Debug-Staging: debug
    Debug-Live: debug
    Release-Dev: release
    Release-Staging: release
    Release-Live: release
settings:
    base:
        DEVELOPMENT_TEAM: M8F9QH57A6
        CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED: YES
    configs:
        Debug-Dev:
            SWIFT_COMPILATION_MODE: "incremental"
        Debug-Staging:
            SWIFT_COMPILATION_MODE: "incremental"
        Debug-Live:
            SWIFT_COMPILATION_MODE: "incremental"
        Release-Dev:
            SWIFT_COMPILATION_MODE: "wholemodule"
        Release-Staging:
            SWIFT_COMPILATION_MODE: "wholemodule"
        Release-Live:
            SWIFT_COMPILATION_MODE: "wholemodule"
attributes:
    ORGANIZATIONNAME: canarin team
packages:
    Features:
        path: Modules/Features
    Core:
        path: Modules/Core
targets:
    Nabla:
        type: application
        platform: iOS
        deploymentTarget: 16.0
        configFiles:
            Debug-Dev: Nabla/SupportingFiles/Configurations/Dev.xcconfig
            Debug-Staging: Nabla/SupportingFiles/Configurations/Staging.xcconfig
            Debug-Live: Nabla/SupportingFiles/Configurations/Live.xcconfig
            Release-Dev: Nabla/SupportingFiles/Configurations/Dev.xcconfig
            Release-Staging: Nabla/SupportingFiles/Configurations/Staging.xcconfig
            Release-Live: Nabla/SupportingFiles/Configurations/Live.xcconfig
        settings:
            base:
                PRODUCT_NAME: Nabla
                MARKETING_VERSION: 1.0.0
                CURRENT_PROJECT_VERSION: 1
                TARGETED_DEVICE_FAMILY: "1"
        sources:
            - Nabla
        dependencies:
            - package: Features
              product: MainFeature
            - package: Features
              product: AuthFeature
            - package: Features
              product: ExampleFeature
            - package: Features
              product: ForceUpdateFeature
            - package: Core
              product: Assets
            - package: Core
              product: Models
            - package: Core
              product: Networking
            - package: Core
              product: Utilities
            - package: Core
              product: CommonUI
        postCompileScripts:
            - script: |
                  export PATH="$PATH:/opt/homebrew/bin"

                  if which swiftlint >/dev/null; then
                    swiftlint
                  else
                    echo "warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint"
                  fi
              name: SwiftLint
              basedOnDependencyAnalysis: false
            - script: |
                  export PATH="$PATH:/opt/homebrew/bin"

                  if which /usr/libexec/PlistBuddy >/dev/null; then
                    version="$MARKETING_VERSION"
                    build="$CURRENT_PROJECT_VERSION"
                    /usr/libexec/PlistBuddy "$SRCROOT/$PRODUCT_NAME/SupportingFiles/Settings.bundle/Root.plist" -c "set PreferenceSpecifiers:2:DefaultValue $version ($build)"
                  else
                  echo "warning: PlistBuddy not found"
                  fi

                  if which license-plist >/dev/null; then
                    license-plist --output-path $PRODUCT_NAME/SupportingFiles/Settings.bundle --config-path $PRODUCT_NAME/SupportingFiles/license_plist.yml --package-path $PROJECT_FILE_PATH/project.xcworkspace/xcshareddata/swiftpm/Package.swift --suppress-opening-directory
                  else
                    echo "warning: license-plist not installed, download from https://github.com/mono0926/LicensePlist"
                  fi
              name: Generate Licenses
              basedOnDependencyAnalysis: false
            - script: |
                  #case "${SERVER_ENVIRONMENT}" in
                  #
                  #"dev" )
                  #cp -r "${PROJECT_DIR}/Nabla/SupportingFiles/GoogleService-Info-Dev.plist" "${BUILT_PRODUCTS_DIR}/${PRODUCT_NAME}.app/GoogleService-Info.plist" ;;
                  #
                  #"staging" )
                  #cp -r "${PROJECT_DIR}/Nabla/SupportingFiles/GoogleService-Info-Staging.plist" "${BUILT_PRODUCTS_DIR}/${PRODUCT_NAME}.app/GoogleService-Info.plist" ;;
                  #
                  #"live" )
                  #cp -r "${PROJECT_DIR}/Nabla/SupportingFiles/GoogleService-Info-Live.plist" "${BUILT_PRODUCTS_DIR}/${PRODUCT_NAME}.app/GoogleService-Info.plist" ;;
                  #
                  #*)
                  #;;
                  #esac
              name: Copy GoogleService-Info
              basedOnDependencyAnalysis: false
schemes:
    Nabla Dev:
        build:
            targets:
                Nabla: all
        run:
            config: Debug-Dev
        profile:
            config: Release-Dev
        analyze:
            config: Release-Dev
        archive:
            config: Release-Dev
    Nabla Staging:
        build:
            targets:
                Nabla: all
        run:
            config: Debug-Staging
        profile:
            config: Release-Staging
        analyze:
            config: Release-Staging
        archive:
            config: Release-Staging
    Nabla Live:
        build:
            targets:
                Nabla: all
        run:
            config: Debug-Live
        profile:
            config: Release-Live
        analyze:
            config: Release-Live
        archive:
            config: Release-Live
